name: Release Build

on:
  push:
    tags:
      - 'tags/v*'
      - 'v*'  # Support both formats for flexibility

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    uses: ./.github/workflows/reusable-test.yml
    with:
      node-version: '22'
      run-lint: true

  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      major_minor: ${{ steps.version.outputs.major_minor }}
      major: ${{ steps.version.outputs.major }}
      docker-tags: ${{ steps.tags.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        # Extract version from tag (handles both tags/v1.0 and v1.0 formats)
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Original tag: ${TAG_NAME}"
        
        if [[ "${TAG_NAME}" == tags/v* ]]; then
          VERSION=${TAG_NAME#tags/v}
          echo "Extracted version from tags/v format: ${VERSION}"
        elif [[ "${TAG_NAME}" == v* ]]; then
          VERSION=${TAG_NAME#v}
          echo "Extracted version from v format: ${VERSION}"
        else
          VERSION=${TAG_NAME}
          echo "Using tag as-is: ${VERSION}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        
        # Create additional version tags
        if [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          MAJOR_MINOR=${VERSION%.*}
          MAJOR=${MAJOR_MINOR%.*}
          echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "Creating semantic version tags: ${VERSION}, ${MAJOR_MINOR}, ${MAJOR}"
        else
          echo "Version doesn't follow semantic versioning, using as-is"
        fi

    - name: Prepare Docker tags
      id: tags
      run: |
        TAGS="ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}"
        
        # Add major.minor tag if available
        if [[ -n "${{ steps.version.outputs.major_minor }}" ]]; then
          TAGS="${TAGS},ghcr.io/${{ github.repository }}:${{ steps.version.outputs.major_minor }}"
        fi
        
        # Add major tag if available
        if [[ -n "${{ steps.version.outputs.major }}" ]]; then
          TAGS="${TAGS},ghcr.io/${{ github.repository }}:${{ steps.version.outputs.major }}"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "🏷️ Docker tags that will be created:"
        echo "${TAGS}" | tr ',' '\n'

  docker-build:
    needs: [test, version]
    uses: ./.github/workflows/reusable-docker.yml
    with:
      push: true
      tags: ${{ needs.version.outputs.docker-tags }}
      labels: |
        org.opencontainers.image.title=BLE Gateway MQTT Proxy
        org.opencontainers.image.description=MQTT proxy for April Brother BLE Gateway v4 with Home Assistant integration
        org.opencontainers.image.version=${{ needs.version.outputs.version }}
        org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        org.opencontainers.image.revision=${{ github.sha }}
        org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        org.opencontainers.image.licenses=MIT
      platforms: 'linux/amd64,linux/arm64'
    secrets:
      registry-token: ${{ secrets.GITHUB_TOKEN }}

  release-build:
    needs: [test, version, docker-build]
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Needed for creating GitHub releases
      packages: write  # Needed for publishing to GitHub Container Registry
      actions: read    # Needed for reading workflow artifacts

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Generating changelog from ${PREVIOUS_TAG} to ${{ needs.version.outputs.tag_name }}"
          
          # Generate changelog from commits
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD --no-merges | grep -v "^- chore: bump version" || echo "- Initial release")
          
          # If no meaningful commits, use a generic message
          if [ -z "$CHANGELOG" ] || [ "$CHANGELOG" = "- Initial release" ]; then
            CHANGELOG="- Bug fixes and improvements"
          fi
        else
          echo "No previous tag found, this is the first release"
          CHANGELOG="- Initial release"
        fi
        
        # Set the changelog as output (escape newlines for GitHub Actions)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.tag_name }}
        name: Release ${{ needs.version.outputs.version }}
        body: |
          ## Release ${{ needs.version.outputs.version }}
          
          ### Changes
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### Docker Images
          
          This release is available as Docker images:
          
          ```bash
          # Pull specific version
          docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}
          
          # Pull major.minor version (if semantic versioning)
          docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.major_minor }}
          
          # Pull major version (if semantic versioning)
          docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.major }}
          ```
          
          ### Usage
          
          See the [README](README.md) for configuration and usage instructions.
        draft: false
        prerelease: false

  security-scan:
    needs: [docker-build, version]
    uses: ./.github/workflows/reusable-security.yml
    with:
      image-tag: ${{ needs.version.outputs.version }}
      wait-time: 60
