name: Release Build

on:
  push:
    tags:
      - 'tags/v*'
      - 'v*'  # Support both formats for flexibility

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

  release-build:
    runs-on: ubuntu-latest
    needs: test
    
    permissions:
      contents: write  # Needed for creating GitHub releases
      packages: write  # Needed for publishing to GitHub Container Registry
      actions: read    # Needed for reading workflow artifacts

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        # Extract version from tag (handles both tags/v1.0 and v1.0 formats)
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Original tag: ${TAG_NAME}"
        
        if [[ "${TAG_NAME}" == tags/v* ]]; then
          VERSION=${TAG_NAME#tags/v}
          echo "Extracted version from tags/v format: ${VERSION}"
        elif [[ "${TAG_NAME}" == v* ]]; then
          VERSION=${TAG_NAME#v}
          echo "Extracted version from v format: ${VERSION}"
        else
          VERSION=${TAG_NAME}
          echo "Using tag as-is: ${VERSION}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        
        # Create additional version tags
        if [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          MAJOR_MINOR=${VERSION%.*}
          MAJOR=${MAJOR_MINOR%.*}
          echo "major_minor=${MAJOR_MINOR}" >> $GITHUB_OUTPUT
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "Creating semantic version tags: ${VERSION}, ${MAJOR_MINOR}, ${MAJOR}"
        else
          echo "Version doesn't follow semantic versioning, using as-is"
        fi

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Docker tags
      id: tags
      run: |
        TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        
        # Add major.minor tag if available
        if [[ -n "${{ steps.version.outputs.major_minor }}" ]]; then
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}"
        fi
        
        # Add major tag if available
        if [[ -n "${{ steps.version.outputs.major }}" ]]; then
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Docker tags that will be created:"
        echo "${TAGS}" | tr ',' '\n'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.tags.outputs.tags }}
        labels: |
          org.opencontainers.image.title=BLE Gateway MQTT Proxy
          org.opencontainers.image.description=MQTT proxy for April Brother BLE Gateway v4 with Home Assistant integration
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.licenses=MIT
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Release ${{ steps.version.outputs.version }}
          
          ### Docker Images
          
          This release is available as Docker images:
          
          ```bash
          # Pull specific version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          
          # Pull major.minor version (if semantic versioning)
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}
          
          # Pull major version (if semantic versioning)
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}
          ```
          
          ### Usage
          
          See the [README](README.md) for configuration and usage instructions.
          
          ### Changes
          
          - Docker image built for linux/amd64 and linux/arm64 platforms
          - Home Assistant MQTT Auto Discovery support
          - Configurable logging levels
          - Health check endpoint
        draft: false
        prerelease: false

  security-scan:
    runs-on: ubuntu-latest
    needs: release-build
    continue-on-error: true
    
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Extract version from tag
      id: version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        if [[ "${TAG_NAME}" == tags/v* ]]; then
          VERSION=${TAG_NAME#tags/v}
        elif [[ "${TAG_NAME}" == v* ]]; then
          VERSION=${TAG_NAME#v}
        else
          VERSION=${TAG_NAME}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Wait for image to be available
      run: |
        echo "‚è≥ Waiting for image to be available in registry..."
        sleep 60

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        timeout: '15m'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
