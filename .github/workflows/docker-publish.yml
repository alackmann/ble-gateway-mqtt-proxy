name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=BLE Gateway MQTT Proxy
          org.opencontainers.image.description=MQTT proxy for April Brother BLE Gateway v4 with Home Assistant integration
          org.opencontainers.image.source={{url}}
          org.opencontainers.image.revision={{sha}}
          org.opencontainers.image.created={{date 'iso8601'}}
          org.opencontainers.image.licenses=MIT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Show Docker tags that will be created
      run: |
        echo "üè∑Ô∏è Docker tags that will be created:"
        echo "${{ steps.meta.outputs.tags }}"
        echo ""
        echo "üìã Docker labels that will be applied:"
        echo "${{ steps.meta.outputs.labels }}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    continue-on-error: true  # Don't fail the entire workflow if security scan fails
    
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Wait for image to be available
      run: |
        echo "‚è≥ Waiting for image to be available in registry..."
        sleep 30

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        timeout: '15m'

    - name: Check if SARIF file exists
      id: check-sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "sarif-exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ SARIF file created successfully"
          ls -la trivy-results.sarif
        else
          echo "sarif-exists=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è SARIF file was not created"
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check-sarif.outputs.sarif-exists == 'true'
      with:
        sarif_file: 'trivy-results.sarif'
